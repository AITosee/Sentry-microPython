from machine import I2C,UART,Pinfrom Sentry import *import time# 等待Sentry2完成操作系统的初始化。此等待时间不可去掉，避免出现Sentry2尚未初始化完毕主控器已经开发发送指令的情况time.sleep(2)# 选择UART或者I2C通讯模式，Sentry2需要进行相应的设置，出厂默认为I2C模式# 参看“设置通讯方式”# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3########################################################################################################## port = UART(2,rx=Pin(16),tx=Pin(17),baudrate=9600)port = I2C(1,scl=Pin(22),sda=Pin(21),freq=400000)# Sentry2默认通讯地址0x60，支持0x60-0x63四个地址。如果I2C总线挂接多个设备，请避免出现地址冲突sentry = Sentry2(0x60)err = sentry.begin(port)print("sentry.begin: 0x%x"% err) # 1、sentry2企业版专有算法；# 2、算法说明# https://tosee.readthedocs.io/zh/latest/Sentry2/Vision/index.html#chapter-vision-motion-index# 3、使用时需要固定好sentry2，避免晃动，出现误报；# 4、正常使用时，应由主控器发送指令控制Sentry2算法的开启与关闭，而非通过摇杆手动进行操作；# 5、满足特定限制条件下，Sentry2可以并行运行多个识别算法# 参看“算法列表”# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3# 6、如需Sentry2启动后，自行运行某种算法，可以在开启算法后，通过设置“寄存器”->“保存当前值”实现。# 参看“设置寄存器”err = sentry.VisionBegin(sentry2_vision_e.kVisionMotionDetect)print("sentry.VisionBegin(sentry2_vision_e.kVisionMotionDetect):0x%x"% err)while True:    # Sentry2不主动返回检测识别结果，需要主控板发送指令进行读取。读取的流程：首先读取识别结果的数量，接收到指令后，Sentry2会刷新结果数据，如果结果数量不为零，那么主控再发送指令读取结果的相关信息。请务必按此流程构建程序。    obj_num = sentry.GetValue(sentry2_vision_e.kVisionMotionDetect, sentry_obj_info_e.kStatus)    if obj_num:        print("Totally %d moving object: "%( obj_num ))        for i in range(1,obj_num+1):            x = sentry.GetValue(sentry2_vision_e.kVisionMotionDetect, sentry_obj_info_e.kXValue, i)            y = sentry.GetValue(sentry2_vision_e.kVisionMotionDetect, sentry_obj_info_e.kYValue, i)            # 结果的w与h值为固定值，无实际意义，故无需读取处理            print("object%d: x=%d, y=%d"%(i, x, y))            time.sleep(0.2)            print("\n")