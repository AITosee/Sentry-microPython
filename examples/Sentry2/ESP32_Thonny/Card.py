from machine import I2C,UART,Pinfrom Sentry import *import time# 等待Sentry2完成操作系统的初始化。此等待时间不可去掉，避免出现Sentry2尚未初始化完毕主控器已经开发发送指令的情况time.sleep(2)# 选择UART或者I2C通讯模式，Sentry2需要进行相应的设置，出厂默认为I2C模式# 参看“设置通讯方式”# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3########################################################################################################## port = UART(2,rx=Pin(16),tx=Pin(17),baudrate=9600)port = I2C(1,scl=Pin(22),sda=Pin(21),freq=400000)# Sentry2默认通讯地址0x60，支持0x60-0x63四个地址。如果I2C总线挂接多个设备，请避免出现地址冲突sentry = Sentry2(0x60)err = sentry.begin(port)print("sentry.begin: 0x%x"% err) # 1、算法介绍# https://tosee.readthedocs.io/zh/latest/Sentry2/Vision/index.html#chapter-vision-card-index# 2、算法视频# https://www.bilibili.com/video/BV1PF41117Hi/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc# 3、sentry2消费版可以识别10张交通卡片，企业版可以识别10张交通卡片+9张形状卡片+10张数字卡片# 4、如需识别自定义的卡片，首先可以尝试集成的深度学习算法；如果效果或者功能不理想，可以尝试烧录Sentry2MV固件，自行采集图片训练模型，然后编写python脚本调用模型。# 5、sentry2最多可以同时识别2排4列共8张卡片，一般按照由上向下、由左向右的顺序输出结果信息；# 6、正常使用时，应由主控器发送指令控制Sentry2算法的开启与关闭，而非通过摇杆手动进行操作；# 7、满足特定限制条件下，Sentry2可以并行运行多个识别算法# 参看“算法列表”# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3# 8、如需Sentry2启动后，自行运行某种算法，可以在开启算法后，通过设置“寄存器”->“保存当前值”实现。# 参看“设置寄存器”err = sentry.VisionBegin(sentry2_vision_e.kVisionCard)print("sentry.VisionBegin(sentry2_vision_e.kVisionCard):0x%x"% err)def Traffic_Card():    global i    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardForward):        print("card%d: Forward   , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardLeft):        print("card%d: Left      , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardRight):        print("card%d: Right, "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardTurnAround):        print("card%d: TurnAround, "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardPark):        print("card%d: Park      , "%(i), end='')    if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 6):        print("card%d: GreenLight, "%(i), end='')    if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 7):        print("card%d: RedLight  , "%(i), end='')    if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 8):        print("card%d: Speed40   , "%(i), end='')    if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 9):        print("card%d: Speed60   , "%(i), end='')    if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 10):        print("card%d: Speed80   , "%(i), end='')    def Symbol_Card():    global i    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardCheck):        print("card%d: Check    , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardCross):        print("card%d: Cross    , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardCircle):        print("card%d: Circle   , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardSquare):        print("card%d: Square   , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardTriangle):        print("card%d: Triangle, "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardPlus):        print("card%d: Plus    , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardMinus):        print("card%d: Minus   , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardDivide):        print("card%d: Divide  , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardEqual):        print("card%d: Equal   , "%(i), end='')    def Number_Card():    global i    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardZero):        print("card%d: 0       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardOne):        print("card%d: 1       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardTwo):        print("card%d: 2       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardThree):        print("card%d: 3       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardFour):        print("card%d: 4       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardFive):        print("card%d: 5       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardSix):        print("card%d: 6       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardSeven):        print("card%d: 7       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardEight):        print("card%d: 8       , "%(i), end='')    if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardNine):        print("card%d: 9       , "%(i), end='')        while True:    # Sentry2不主动返回检测识别结果，需要主控板发送指令进行读取。读取的流程：首先读取识别结果的数量，接收到指令后，Sentry2会刷新结果数据，如果结果数量不为零，那么主控再发送指令读取结果的相关信息。请务必按此流程构建程序。    obj_num = (sentry.GetValue(sentry2_vision_e.kVisionCard, sentry_obj_info_e.kStatus))    if obj_num:        print("Totally %d cards: "%obj_num)        for i in range(1,obj_num+1):            x = sentry.GetValue(sentry2_vision_e.kVisionCard, sentry_obj_info_e.kXValue, i)            y = sentry.GetValue(sentry2_vision_e.kVisionCard, sentry_obj_info_e.kYValue, i)            w = sentry.GetValue(sentry2_vision_e.kVisionCard, sentry_obj_info_e.kWidthValue, i)            h = sentry.GetValue(sentry2_vision_e.kVisionCard, sentry_obj_info_e.kHeightValue, i)                        Traffic_Card()            Symbol_Card()            Number_Card()            print("x=%d, y=%d, w=%d, h=%d"%(x, y, w, h))                        time.sleep(0.2)            print("\n")