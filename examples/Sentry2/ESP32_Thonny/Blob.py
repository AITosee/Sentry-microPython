from machine import I2C,UART,Pinfrom  Sentry  import *import timeimport random# 等待Sentry2完成操作系统的初始化。此等待时间不可去掉，避免出现Sentry2尚未初始化完毕主控器已经开发发送指令的情况time.sleep(2)# 选择UART或者I2C通讯模式，Sentry2需要进行相应的设置，出厂默认为I2C模式# 参看“设置通讯方式”# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3########################################################################################################## port = UART(2,rx=Pin(16),tx=Pin(17),baudrate=9600)port = I2C(1,scl=Pin(22),sda=Pin(21),freq=400000)# Sentry2默认通讯地址0x60，支持0x60-0x63四个地址。如果I2C总线挂接多个设备，请避免出现地址冲突sentry = Sentry2(0x60)err = sentry.begin(port)print("sentry.begin: 0x%x"% err)#利用随机数，决定色块算法参数组的数量，并且从6组预设的参数内依次取出相同组数的参数赋值给算法index = (random.randint(1, 6))sentry.SetParamNum(sentry2_vision_e.kVisionBlob,index)print("random= %d"%index)for i in range(1, index+1):    if (i == 1):        sentry.SetParam(sentry2_vision_e.kVisionBlob,[0, 0, 6, 8, color_label_e.kColorYellow],1)    if (i == 2):        sentry.SetParam(sentry2_vision_e.kVisionBlob,[0, 0, 6, 8, color_label_e.kColorBlue],2)    if (i == 3):        sentry.SetParam(sentry2_vision_e.kVisionBlob,[0, 0, 10, 10, color_label_e.kColorGreen],3)    if (i == 4):        sentry.SetParam(sentry2_vision_e.kVisionBlob,[0, 0, 10, 10, color_label_e.kColorRed],4)    if (i == 5):        sentry.SetParam(sentry2_vision_e.kVisionBlob,[0, 0, 12, 9, color_label_e.kColorWhite],5)    if (i == 6):        sentry.SetParam(sentry2_vision_e.kVisionBlob,[0, 0, 12, 9, color_label_e.kColorBlack],6)    time.sleep(0.1)  # 1、色块检测算法可以同时设置6组参数，如果每组参数对应1种颜色，则可以同时检测6种颜色的色块；# 2、算法默认识别准确度为“均衡”；可以通过摇杆设置为“准确”与“灵敏”模式，# 3、算法默认每种颜色只输出1个结果。“灵敏”与“均衡”模式下最多每种颜色5个结果，但总的输出结果不超过25个，可以通过摇杆设置每种颜色的最大输出数量。# 4、设置为“准确”模式，即使视野内存在多个满足条件的色块，算法也只输出1个结果；# 5、算法说明# https://tosee.readthedocs.io/zh/latest/Sentry2/Vision/index.html#chapter-vision-blob-index# 6、参考视频# https://www.bilibili.com/video/BV1y94y1677G/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc# https://www.bilibili.com/video/BV1KM411C73u/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc# 7、环境光对颜色识别与色块检测算法的影响极大：过亮会导致过曝，识别到的颜色均为白色；过暗会导致识别的颜色均为黑色。这两种算法在使用时注意以下几点：# a.环境过亮时，降低曝光时间在一定程度上可以缓解；最有效的方法是降低环境光亮度以及避免采用易反光的材料做为地图或者目标物体；# b.环境过暗时，增加曝光时间在一定程度上可以缓解，但会增加算法检测识别的时间；最有效的方法是进行补光，Sentry2摄像头两侧的LED灯“检测到”与“未检测到”两种情况均设置为白光并且亮度调到最大值可以作为补光灯使用；# c.当目标物体的颜色较淡（反光或者物体自身原因）时，可以增加成像的饱和度；# d.出厂默认的“自动”白平衡模式可以满足多数应用需求；# 存在大面积单色（非白色）区域，近距离识别颜色时，图像会发生偏色问题，可以通过摇杆操作或者发送代码设置白平衡模式为“锁定”，操作时需要将sentry2对准白色面，距离10-20cm；# 如果通过代码修改白平衡模式，命令发出后，延时至少500ms，等待设置生效；# 设置白平衡为“锁定”模式并且经过白平衡校正操作，重启Sentry2参数依然有效；如果环境光发生改变，需要重新执行白平衡锁定操作。## “设置LED灯光颜色”与“摄像头设置”请查看# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-6# 8、正常使用时，应由主控器发送指令控制Sentry2算法的开启与关闭，而非通过摇杆手动进行操作；# 9、满足特定限制条件下，Sentry2可以并行运行多个识别算法# 参看“算法列表”# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3# 10、如需Sentry2启动后，自行运行某种算法，可以在开启算法后，通过设置“寄存器”->“保存当前值”实现。# 参看“设置寄存器”err = sentry.VisionBegin(sentry2_vision_e.kVisionBlob)print("sentry.VisionBegin(sentry2_vision_e.kVisionBlob):0x%x"% err)while True:    # Sentry2不主动返回检测识别结果，需要主控板发送指令进行读取。读取的流程：首先读取识别结果的数量，接收到指令后，Sentry2会刷新结果数据，如果结果数量不为零，那么主控再发送指令读取结果的相关信息。请务必按此流程构建程序。    obj_num = sentry.GetValue(sentry2_vision_e.kVisionBlob, sentry_obj_info_e.kStatus)        if obj_num:        print("Totally %d blobs: "%( obj_num ))        for i in range(1,obj_num+1):            x = sentry.GetValue(sentry2_vision_e.kVisionBlob, sentry_obj_info_e.kXValue, i)            y = sentry.GetValue(sentry2_vision_e.kVisionBlob, sentry_obj_info_e.kYValue, i)            w = sentry.GetValue(sentry2_vision_e.kVisionBlob, sentry_obj_info_e.kWidthValue, i)            h = sentry.GetValue(sentry2_vision_e.kVisionBlob, sentry_obj_info_e.kHeightValue, i)            if (sentry.GetValue(sentry2_vision_e.kVisionBlob,sentry_obj_info_e.kLabel,i)==color_label_e.kColorBlack):                print("blob%d: Black , "%i, end='')            if (sentry.GetValue(sentry2_vision_e.kVisionBlob,sentry_obj_info_e.kLabel,i)==color_label_e.kColorWhite):                print("blob%d: White , "%i, end='')            if (sentry.GetValue(sentry2_vision_e.kVisionBlob,sentry_obj_info_e.kLabel,i)==color_label_e.kColorRed):                print("blob%d: Red   , "%i, end='')            if (sentry.GetValue(sentry2_vision_e.kVisionBlob,sentry_obj_info_e.kLabel,i)==color_label_e.kColorGreen):                print("blob%d: Green , "%i, end='')            if (sentry.GetValue(sentry2_vision_e.kVisionBlob,sentry_obj_info_e.kLabel,i)==color_label_e.kColorBlue):                print("blob%d: Blue  , "%i, end='')            if (sentry.GetValue(sentry2_vision_e.kVisionBlob,sentry_obj_info_e.kLabel,i)==color_label_e.kColorYellow):                print("blob%d: Yellow, "%i, end='')                        print("x=%d, y=%d, w=%d, h=%d"%( x, y, w, h))            time.sleep(0.2)        print("\n")