import timefrom Sentry import *from mpython import *from machine import UARTuart1 = UART(1, baudrate=57600, tx=Pin.P14, rx=Pin.P13)sentry = Sentry2(0x60)brightness=9# 自定义函数def UART():  global my_variable, i, num  sentry.begin(uart1)def I2C():  global my_variable, i, num  sentry.begin(i2c)def Result_Display():  global my_variable, i, num  # Sentry2不会主动返回结果信息，需要主控器发送指令进行读取。首先要读取结果的数量，此时算法会自动更新识别或者检测的信息，如果结果不为零，再读取其他数据。 编写程序时请务必遵循本流程框架。  num = (sentry.GetValue(sentry2_vision_e.kVisionAprilTag, sentry_obj_info_e.kStatus))  # Sengo/Sentry系列参数与结果编号均从1开始  i = 1  # 遍历所有识别结果，最多可以识别25个Apriltag；  # 结果输出顺序：从左到右，从上到下  for index in range(num):    rgb[1] = (0*brightness//9, 0*brightness//9, 255*brightness//9)    rgb.write()    if (10 > i):      oled.DispChar((str("#") + str(((str(i))[0:1]))), 95, 0, 1)    else:      oled.DispChar((str("#") + str(((str(i))[0:2]))), 95, 0, 1)    oled.DispChar((str("l=") + str((sentry.GetValue(sentry2_vision_e.kVisionAprilTag,sentry_obj_info_e.kLabel,i)))), 0, 16, 1)    oled.DispChar((str("x=") + str((sentry.GetValue(sentry2_vision_e.kVisionAprilTag,sentry_obj_info_e.kXValue,i)))), 0, 32, 1)    oled.DispChar((str("y=") + str((sentry.GetValue(sentry2_vision_e.kVisionAprilTag,sentry_obj_info_e.kYValue,i)))), 64, 32, 1)    oled.DispChar((str("w=") + str((sentry.GetValue(sentry2_vision_e.kVisionAprilTag,sentry_obj_info_e.kWidthValue,i)))), 0, 48, 1)    oled.DispChar((str("h=") + str((sentry.GetValue(sentry2_vision_e.kVisionAprilTag,sentry_obj_info_e.kHeightValue,i)))), 64, 48, 1)    oled.show()    time.sleep(0.1)    oled.fill_rect(95,0,32,16,0)    oled.fill_rect(0, (2-1)*16, 128, 16, 0)    oled.fill_rect(0, (3-1)*16, 128, 16, 0)    oled.fill_rect(0, (4-1)*16, 128, 16, 0)    oled.show()    rgb[1] = (0*brightness//9, 0*brightness//9, 0*brightness//9)    rgb.write()    time.sleep(0.1)    i = (i + 1)num = 0i = 0# 等待Sentry2完成操作系统的初始化。此等待时间不可去掉，避免出现Sentry2尚未初始化完毕主控器已经开发发送指令的情况time.sleep(2)I2C()# 1、Apriltag与二维码不同，请勿混淆。二者在使用时，周围一圈均需要留白；# 2、算法介绍# https://tosee.readthedocs.io/zh/latest/Sentry2/Vision/index.html#chapter-vision-apriltag-index# 默认编码格式36H11，如需采用25H9与16H5格式的编码，请通过摇杆进行切换# 3、参考视频# https://www.bilibili.com/video/BV1dP4y1e7SW/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc# https://www.bilibili.com/video/BV17r4y1d7G3/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc# 4、如果需要更快的识别帧率，可以通过摇杆将识别模式更改为“快速”；# 5、使用该算法时，可以配合调整zoom值、锐度、对比度、成像亮度来提升识别的的距离以及识别率。# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-21# 6、正常使用时，应由主控器发送指令控制Sentry2算法的开启与关闭，而非通过摇杆手动进行操作；# 7、如需Sentry2启动后，自行运行某种算法，可以在开启算法后，通过设置“寄存器”->“保存当前值”实现。# 设置寄存器# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3sentry.VisionBegin(sentry2_vision_e.kVisionAprilTag)oled.DispChar("Algo:Apriltag", 0, (1-1)*16, 1)oled.show()while True:  Result_Display()