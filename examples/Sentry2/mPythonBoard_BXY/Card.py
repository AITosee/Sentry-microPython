import timefrom Sentry import *from mpython import *from machine import UARTuart1 = UART(1, baudrate=115200, tx=Pin.P14, rx=Pin.P13)sentry = Sentry2(0x60)brightness=9# 自定义函数def UART():  global my_variable, i, Start, angle, num  sentry.begin(uart1)def I2C():  global my_variable, i, Start, angle, num  sentry.begin(i2c)def GreenLight():  global my_variable, i, Start, angle, num  oled.DispChar("Green Light", 0, (2-1)*16, 1)def Forward():  global my_variable, i, Start, angle, num  oled.DispChar("Go Straight", 0, (2-1)*16, 1)def Result_Display():  global my_variable, i, Start, angle, num  # Sentry2不会主动返回结果信息，需要主控器发送指令进行读取。首先要读取结果的数量，此时算法会自动更新识别或者检测的信息，如果结果不为零，再读取其他数据。 编写程序时请务必遵循本流程框架。  num = (sentry.GetValue(sentry2_vision_e.kVisionCard, sentry_obj_info_e.kStatus))  # Sentry2的设置参数与输出结果编号均从1开始  i = 1  for index in range(num):    Traffic_Card()    Symbol_Card()    Number_Card()    oled.DispChar((str("x=") + str((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kXValue,i)))), 0, 32, 1)    oled.DispChar((str("y=") + str((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kYValue,i)))), 64, 32, 1)    oled.DispChar((str("w=") + str((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kWidthValue,i)))), 0, 48, 1)    oled.DispChar((str("h=") + str((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kHeightValue,i)))), 64, 48, 1)    oled.show()    time.sleep(0.2)    oled.fill_rect(0, (2-1)*16, 128, 16, 0)    oled.fill_rect(0, (3-1)*16, 128, 16, 0)    oled.fill_rect(0, (4-1)*16, 128, 16, 0)    oled.show()    i = (i + 1)def RedLight():  global my_variable, i, Start, angle, num  oled.DispChar("Red Light", 0, (2-1)*16, 1)def Traffic_Card():  global my_variable, i, Start, angle, num  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardForward):    Forward()  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardLeft):    Left()  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardRight):    Right()  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardTurnAround):    Turn_Around()  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardPark):    Park()  if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 6):    GreenLight()  if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 7):    RedLight()  if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 8):    Speed40()  if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 9):    Speed60()  if ((sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 10):    Speed80()def Left():  global my_variable, i, Start, angle, num  oled.DispChar("Left", 0, (2-1)*16, 1)def Symbol_Card():  global my_variable, i, Start, angle, num  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardCheck):    oled.DispChar("Check", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardCross):    oled.DispChar("Cross", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardCircle):    oled.DispChar("Circle", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardSquare):    oled.DispChar("Square", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardTriangle):    oled.DispChar("Triangle", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardPlus):    oled.DispChar("Plus", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardMinus):    oled.DispChar("Minus", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardDivide):    oled.DispChar("Divide", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardEqual):    oled.DispChar("Equal", 0, (2-1)*16, 1)def Number_Card():  global my_variable, i, Start, angle, num  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardZero):    oled.DispChar("0", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardOne):    oled.DispChar("1", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardTwo):    oled.DispChar("2", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardThree):    oled.DispChar("3", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardFour):    oled.DispChar("4", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardFive):    oled.DispChar("5", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardSix):    oled.DispChar("6", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardSeven):    oled.DispChar("7", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardEight):    oled.DispChar("8", 0, (2-1)*16, 1)  if (sentry.GetValue(sentry2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sentry2_card_label_e.kCardNine):    oled.DispChar("9", 0, (2-1)*16, 1)def Speed40():  global my_variable, i, Start, angle, num  oled.DispChar("Speed 40", 0, (2-1)*16, 1)def Right():  global my_variable, i, Start, angle, num  oled.DispChar("Right", 0, (2-1)*16, 1)def Speed60():  global my_variable, i, Start, angle, num  oled.DispChar("Speed 60", 0, (2-1)*16, 1)def Turn_Around():  global my_variable, i, Start, angle, num  oled.DispChar("Turn Around", 0, (2-1)*16, 1)def Speed80():  global my_variable, i, Start, angle, num  oled.DispChar("Speed 80", 0, (2-1)*16, 1)def Park():  global my_variable, i, Start, angle, num  oled.DispChar("Park", 0, (2-1)*16, 1)num = 0i = 0# 等待Sentry2完成操作系统的初始化。此等待时间不可去掉，避免出现Sentry2尚未初始化完毕主控器已经开发发送指令的情况time.sleep(2)I2C()# 1、算法介绍# https://tosee.readthedocs.io/zh/latest/Sentry2/Vision/index.html#chapter-vision-card-index# 2、算法视频# https://www.bilibili.com/video/BV1PF41117Hi/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc# 3、卡片识别算法为KPU算法，无法与其他kpu算法并行执行；# 4、sentry2消费版可以识别10张交通卡片，企业版可以识别10张交通卡片+9张形状卡片+10张数字卡片。# 如需识别自定义的卡片，首先可以尝试集成的深度学习算法；如果效果或者功能不理想，可以尝试烧录Sentry2MV固件，自行采集图片训练模型，然后编写python脚本调用模型。# 5、sentry2最多可以同时识别2排4列共8张卡片，一般按照由上向下、由左向右的顺序输出结果信息；# 6、正常使用时，应由主控器发送指令控制Sentry2算法的开启与关闭，而非通过摇杆手动进行操作；# 7、如需Sentry2启动后，自行运行某种算法，可以在开启算法后，通过设置“寄存器”->“保存当前值”实现。# 设置寄存器# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3sentry.VisionBegin(sentry2_vision_e.kVisionCard)oled.DispChar("Algo:Card", 0, (1-1)*16, 1)oled.show()while True:  rgb[1] = (0*brightness//9, 0*brightness//9, 255*brightness//9)  rgb.write()  Result_Display()  rgb[1] = (0*brightness//9, 0*brightness//9, 0*brightness//9)  rgb.write()  time.sleep(0.2)