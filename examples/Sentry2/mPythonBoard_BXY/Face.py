import timefrom Sentry import *from mpython import *from machine import UARTuart1 = UART(1, baudrate=57600, tx=Pin.P14, rx=Pin.P13)sentry = Sentry2(0x60)brightness=9# 自定义函数def UART():  global my_variable, key_A, key_B, param_set, ID, num, key_H, key_P, key_N, i, ready  sentry.begin(uart1)def Key_Operation():  global my_variable, key_A, key_B, param_set, ID, num, key_H, key_P, key_N, i, ready  if (param_set == 1):    param_set = 0    Button_A()    Button_B()    oled.fill_rect(112,0,16,16,0)    oled.show()    time.sleep(0.2)    oled.DispChar((str(ID)), 112, 0, 1)    oled.DispChar("Operation Done", 0, (2-1)*16, 1)    oled.show()    time.sleep(0.2)    oled.fill_rect(0, (2-1)*16, 128, 16, 0)    oled.show()def Result_Display():  global my_variable, key_A, key_B, param_set, ID, num, key_H, key_P, key_N, i, ready  # Sentry2不主动返回检测识别结果，需要主控板发送指令进行读取。读取的流程：首先读取识别结果的数量，接收到指令后，Sentry2会刷新结果数据，如果结果数量不为零，那么主控再发送指令读取结果的相关信息。请务必按此流程构建程序。  num = (sentry.GetValue(sentry2_vision_e.kVisionFace, sentry_obj_info_e.kStatus))  # Sentry/Sengo系列的设置参数与输出结果编号均从1开始  i = 1  for index in range(num):    rgb[1] = (0*brightness//9, 0*brightness//9, 255*brightness//9)    rgb.write()    # 返回的人脸标签为0，表示未记忆的人脸    # 返回的人脸标签为200，表示戴口罩    if ((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kLabel,i)) == 0):      oled.DispChar("Stranger!", 0, (2-1)*16, 1)    elif ((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kLabel,i)) == 200):      oled.DispChar("Masked!", 0, (2-1)*16, 1)    else:      oled.DispChar((str("ID=") + str((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kLabel,i)))), 0, (2-1)*16, 1)    oled.DispChar((str("x=") + str((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kXValue,i)))), 0, 32, 1)    oled.DispChar((str("y=") + str((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kYValue,i)))), 64, 32, 1)    oled.DispChar((str("w=") + str((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kWidthValue,i)))), 0, 48, 1)    oled.DispChar((str("h=") + str((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kHeightValue,i)))), 64, 48, 1)    oled.show()    time.sleep(0.5)    rgb[1] = (0*brightness//9, 0*brightness//9, 0*brightness//9)    rgb.write()    oled.fill_rect(0, (2-1)*16, 128, 16, 0)    oled.fill_rect(0, (3-1)*16, 128, 16, 0)    oled.fill_rect(0, (4-1)*16, 128, 16, 0)    oled.show()    time.sleep(0.5)    i = (i + 1)def I2C():  global my_variable, key_A, key_B, param_set, ID, num, key_H, key_P, key_N, i, ready  sentry.begin(i2c)def Button_A():  global my_variable, key_A, key_B, param_set, ID, num, key_H, key_P, key_N, i, ready  if (key_A == 1):    key_A = 0    ready = 0    while not ((ready > 0)):      if ((sentry.GetValue(sentry2_vision_e.kVisionFace, sentry_obj_info_e.kStatus)) > 0):        if ((sentry.GetValue(sentry2_vision_e.kVisionFace,sentry_obj_info_e.kHeightValue,1)) > 50):          ready = 1        else:          oled.DispChar("Close to the face", 0, (2-1)*16, 1)          oled.show()      else:        oled.DispChar("Nobody", 0, (2-1)*16, 1)        oled.show()    oled.fill_rect(0, (2-1)*16, 128, 16, 0)    oled.show()    time.sleep(0.2)    oled.DispChar("Saving...", 0, (2-1)*16, 1)    # 参数5写入100表示存储人脸数据    sentry.SetParam(sentry2_vision_e.kVisionFace,[0, 0, 0, 0, 100],ID)    time.sleep(2)    ID = (ID + 1)    if (ID > 15):      ID = 1def Button_B():  global my_variable, key_A, key_B, param_set, ID, num, key_H, key_P, key_N, i, ready  if (key_B == 1):    key_B = 0    ID = (ID - 1)    if (1 > ID):      ID = 15    sentry.SetParam(sentry2_vision_e.kVisionFace,[0, 0, 0, 0, 0],ID)    time.sleep(2)# 事件回调函数def on_button_a_down(_):  time.sleep_ms(10)  if button_a.value() == 1: return  global param_set  global key_A  param_set = 1  key_A = 1def on_button_b_down(_):  time.sleep_ms(10)  if button_b.value() == 1: return  global param_set  global key_B  param_set = 1  key_B = 1button_a.irq(trigger=Pin.IRQ_FALLING, handler=on_button_a_down)button_b.irq(trigger=Pin.IRQ_FALLING, handler=on_button_b_down)param_set = 0key_A = 0key_B = 0key_P = 0key_N = 0key_H = 0ready = 0num = 0ID = 1i = 0# 等待Sentry2完成操作系统的初始化。此等待时间不可去掉，避免出现Sentry2尚未初始化完毕主控器已经开发发送指令的情况time.sleep(2)I2C()# 1、sentry2消费版可以储存15张人脸数据，企业版可以储存25张人脸数据；# 2、除了可以通过操作摇杆记忆/删除人脸数据外，还可以参考本例程，通过自定义的指令进行操作；# 3、sentry2内人脸的备注姓名无法发送给主控板，传递的只有label值；# 4、算法文档# https://tosee.readthedocs.io/zh/latest/Sentry2/Vision/index.html#chapter-vision-face-index# 5、参考视频# https://www.bilibili.com/video/BV16u4y197Kj/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc## https://www.bilibili.com/video/BV15e411N7Tj/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc## https://www.bilibili.com/video/BV1ok4y157jV/?spm_id_from=333.1387.upload.video_card.click&vd_source=a6a4a13d17ed26ee248472534a8ec3cc## 6、正常使用时，应由主控器发送指令控制Sentry2算法的开启与关闭，而非通过摇杆手动进行操作；# 7、如需Sentry2启动后，自行运行某种算法，可以在开启算法后，通过设置“寄存器”->“保存当前值”实现。# 设置寄存器# https://tosee.readthedocs.io/zh/latest/Sentry2/Hardware/index.html#section-3sentry.VisionBegin(sentry2_vision_e.kVisionFace)oled.DispChar("Algo: Face", 0, 0, 1)oled.DispChar("Index=", 64, 0, 1)oled.DispChar((str(ID)), 112, 0, 1)oled.show()while True:  rgb[1] = (0*brightness//9, 0*brightness//9, 255*brightness//9)  rgb.write()  Key_Operation()  Result_Display()  rgb[1] = (0*brightness//9, 0*brightness//9, 0*brightness//9)  rgb.write()  time.sleep(0.2)